print("Задание 1")

'''
Задание 1
Реализовать скрипт, в котором должна быть предусмотрена функция расчёта
заработной платы сотрудника. Используйте в нём формулу: 
(выработка в часах*ставка в час) + премия. Во время выполнения расчёта для 
конкретных значений необходимо запускать скрипт с параметрами.
'''

'''
Функция sys.argv модуля sys возвращает список параметров командной строки,
передаваемых скрипту Python.
'''

from sys import argv

script_name, worked_hour, rate, benefit = argv

print("Имя скрипта: ", script_name)
print("Выработка в часах: ", worked_hour)
print("Ставка в час: ", rate)
print("Премия: ", benefit)


def my_func(worked_hour, rate, benefit):
    wages = float(worked_hour) * float(rate) + float(benefit)
    print(f"Заработная плата сотрудника составила:  {wages:.2f} руб.")


my_func(worked_hour, rate, benefit)

print("Задание 2")

'''
Задание 2
Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''

initial_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [initial_list[el] for el in range(1, len(initial_list))
            if initial_list[el] > initial_list[el - 1]]
print(new_list)

print("Задание 3")

'''
Задание 3
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.
'''

new_list = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(new_list)

print("Задание 4")

'''
Задание 4
Представлен список чисел. Определите элементы списка, не имеющие повторений. 
Сформируйте итоговый массив чисел, соответствующих требованию. 
Элементы выведите в порядке их следования в исходном списке.
 Для выполнения задания обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''

from itertools import count

initial_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in initial_list if initial_list.count(el) == 1]
print(new_list)

print("Задание 5")

'''
Задание 5
Реализовать формирование списка, используя функцию range() и 
возможности генератора. В список должны войти чётные числа от 100 
до 1000 (включая границы). Нужно получить результат вычисления
произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''

from functools import reduce

my_list = [el for el in range(1, 1001) if el % 2 == 0]

print(my_list)


def my_func(prev_el, el):
    return prev_el * el

print(reduce(my_func, my_list))

print("Задание 6")

'''
Задание 6
Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее. 
Подсказка: используйте функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Предусмотрите условие его завершения. #### 
Например, в первом задании выводим целые числа, начиная с 3. 
При достижении числа 10 — завершаем цикл. 
Вторым пунктом необходимо предусмотреть условие,
 при котором повторение элементов списка прекратится.
'''

from itertools import cycle


def count_func(start_number, stop_number):
    for el in count(start_number):
        if el > stop_number:
            break
        else:
            print(el)


count_func(start_number=int(input("Первое число: ")),
           stop_number=int(input("Конечное число: ")))


def cycle_func(my_list, stop):
    с = 0
    for el in cycle(my_list):
        if с >= stop:
            break
        print(el)
        с += 1


cycle_func(my_list=["ABC", 3, 7], stop=int(input("Введите число элементов: ")))

print("Задание 7")

'''
Задание 7
Реализовать генератор с помощью функции с ключевым словом yield, 
создающим очередное значение. При вызове функции должен создаваться объект-
генератор. Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. В цикле нужно выводить только
 первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. 
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''

from math import factorial

n = int(input("Введите число: "))

def fact(n):
    for i in range(1, n + 1):
        yield factorial(i)

for el in fact(n):
    print(el)